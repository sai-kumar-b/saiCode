using System;
using System.Collections.Generic;
using System.Web.Mvc;
using WebApplication2.Models;

namespace WebApplication2.Controllers
{
    public class CalculatorController : Controller
    {
        private Calculator obj = new Calculator();

        private void GetResult(char opp, Calculator model, double number)
        {
            switch (opp)
            {
                case '+': model.Result += number; break;
                case '-': model.Result -= number; break;
                case '*': model.Result *= number; break;
                case '/':
                    if (number == 0)
                    {
                        ZeroError(model);
                        return;
                    }
                    model.Result /= number;
                    break;
            }
        }

        private void ZeroError(Calculator model)
        {
            ViewBag.ErrorMsg = "Cannot Divide by Zero...!";
            model.Display = "";
            model.Result = 0;
            TempData["Temp"] = null;
        }

        public ActionResult Index()
        {
            return View(obj);
        }

        [HttpPost]
        public ActionResult Index(Calculator model, string Operation, string number)
        {
            if (Operation == "C")
            {
                obj.Display = "";
                obj.Result = 0;
                ViewBag.ErrorMsg = "";
                TempData["Temp"] = null;
                return View("Index", obj);
            }

            if (string.IsNullOrEmpty(Operation) || !"+-*/.".Contains(Operation))
            {
                model.Display += number;
            }
            else if (Operation == "=")
            {
                ProcessCalculation(model);
            }
            else
            {
                ProcessOperation(model, Operation);
            }

            return View("Index", model);
        }

        private void ProcessOperation(Calculator model, string operation)
        {
            if (operation == "=")
            {
                ProcessCalculation(model);
            }
            else
            {
                TempData["Temp"] = operation;
                model.Display += operation;
            }
        }

        private void ProcessCalculation(Calculator model)
        {
            string input = model.Display;
            if (string.IsNullOrWhiteSpace(input))
            {
                model.Display = "";
                return;
            }

            double currentNumber = 0;
            char currentOp = '+';
            double result = 0;
            bool hasOperator = false;

            for (int i = 0; i < input.Length; i++)
            {
                char ch = input[i];

                if (char.IsDigit(ch) || ch == '.')
                {
                    int start = i;
                    while (i < input.Length && (char.IsDigit(input[i]) || input[i] == '.'))
                    {
                        i++;
                    }
                    i--; // Adjust for loop increment
                    string numberStr = input.Substring(start, i - start + 1);
                    currentNumber = double.Parse(numberStr);
                }
                else if (ch == '+' || ch == '-' || ch == '*' || ch == '/')
                {
                    if (hasOperator)
                    {
                        GetResult(currentOp, model, currentNumber);
                    }
                    else
                    {
                        result = currentNumber;
                        hasOperator = true;
                    }
                    currentOp = ch;
                    currentNumber = 0;
                }
                else if (ch == '=')
                {
                    if (hasOperator)
                    {
                        GetResult(currentOp, model, currentNumber);
                        model.Display = $"{result}={model.Result}";
                        model.Result = result;
                    }
                    return;
                }
            }

            if (hasOperator)
            {
                GetResult(currentOp, model, currentNumber);
                model.Display = $"{result}={model.Result}";
                model.Result = result;
            }
        }
    }
}

